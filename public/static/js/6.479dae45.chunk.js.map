{"version":3,"sources":["components/FlashMessage/FlashMessage.jsx","modules/Book/ManageBook/index.jsx"],"names":["FlashMessage","props","data","this","alertClass","className","role","constructor","String","Object","keys","map","key","Array","item","index","msg","type","Component","ManageBook","state","id","isEditing","match","params","getBookDetail","setState","initialValues","title","description","isbn","selectedBook","length","errors","message","to","enableReinitialize","onSubmit","onSubmitForm","validationSchema","Yup","shape","required","values","touched","isValid","handleChange","handleBlur","handleSubmit","htmlFor","value","onChange","onBlur","placeholder","disabled","connect","books","manage_book","list_book","dispatch","evt","undefined","preventDefault","bookUpdateRequest","bookAddRequest","onPageInit","bookAddPageInit","bookDetailInit","withRouter"],"mappings":"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","file":"static/js/6.479dae45.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass FlashMessage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { data } = this.props;\n        const { alertClass } = this.props;\n        return (\n            <div className={`alert alert-${alertClass} alert-dismissible fade show`} role=\"alert\">\n                {data.constructor === String && <li> {data}</li>}\n                {data.constructor === Object &&\n                    Object.keys(data).map(key => {\n                    return (\n                        <li key={key}>\n                        {key} {data[key]}\n                        </li>\n                    );\n                    })}\n                {data.constructor === Array &&\n                    data.map((item, index) => {\n                    return <li key={index}>{item.msg}</li>;\n                    })}\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default FlashMessage;\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../book.css';\nimport FlashMessage from '../../../components/FlashMessage/FlashMessage';\nimport { bookAddPageInit, bookAddRequest, bookUpdateRequest }  from './actions';\nimport { bookDetailInit }  from '../actions';\nimport PropTypes from 'prop-types';\n\nclass ManageBook extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: null,\n            isEditing: false,\n        }\n    }\n\n    componentDidMount(){\n        const { match: { params: {id} } } = this.props;\n        if(id){\n            this.props.getBookDetail(id);\n            this.setState({id:id, isEditing: true});\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { match: { params: {id} } } = props;\n        if(id !== null && Object.keys(props.selectedBook).length === 0){\n            if(state.isEditing !== false){\n                return {id: null, isEditing: false};\n            }\n        }else{\n            if(state.isEditing !== true){\n                return {id: id, isEditing: true};\n            }\n        }\n        return null;\n    }\n\n    render(){\n        let initialValues = {title:\"\",description:\"\",isbn:\"\"};\n        if(Object.keys(this.props.selectedBook).length > 0)\n            initialValues = this.props.selectedBook;\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                    {Object.keys(this.props.errors).length > 0 &&\n                        <div>\n                            <FlashMessage data={this.props.errors.data?this.props.errors.data:this.props.errors.message} alertClass=\"danger\" />\n                        </div>\n                    }\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1 className=\"display-4\">{ this.state.isEditing?\"Update\":\"Add\"} Book <Link to=\"/book\" className=\"btn btn-primary btn-sm\">All Books</Link></h1>\n                        <Formik\n                            initialValues={initialValues}\n                            enableReinitialize\n                            onSubmit={this.props.onSubmitForm(this.state)}\n                            validationSchema={Yup.object().shape({\n                                title: Yup.string()\n                                .required('Required'),\n                                isbn: Yup.string()\n                                .required('Required'),\n                                description: Yup.string()\n                                .required('Required'),\n                            })}\n                            >\n                            {props => {\n                                const {\n                                values,\n                                touched,\n                                errors,\n                                isValid,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                } = props;\n                                return (\n                                    <form onSubmit={handleSubmit}>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"title\">Book Title</label>\n                                            <input type=\"text\"\n                                                id=\"title\"\n                                                value={values.title}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.title && touched.title ? 'form-control text-input error' : 'form-control text-input'\n                                                } \n                                                placeholder=\"Enter title\" \n                                            />\n                                            {errors.title && touched.title && (\n                                                <div className=\"input-feedback\">{errors.title}</div>\n                                            )}\n                                        </div> \n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"isbn\">ISBN</label>\n                                            <input type=\"text\" \n                                                id=\"isbn\"\n                                                value={values.isbn}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.isbn && touched.isbn ? 'form-control text-input error' : 'form-control text-input'\n                                                }\n                                                placeholder=\"isbn\" \n                                            />\n                                            {errors.isbn && touched.isbn && (\n                                                <div className=\"input-feedback\">{errors.isbn}</div>\n                                            )}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"description\">Book Description</label>\n                                            <textarea \n                                                id=\"description\"\n                                                value={values.description}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.description && touched.description ? 'form-control text-input error' : 'form-control text-input'\n                                                }\n                                                placeholder=\"description\" \n                                            />\n                                            {errors.description && touched.description && (\n                                                <div className=\"input-feedback\">{errors.description}</div>\n                                            )}\n                                        </div>\n                                        <button type=\"submit\" className=\"btn btn-primary\" disabled={!isValid}>{ this.state.id?\"Update\":\"Add\"}</button>\n                                    </form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nManageBook.propTypes = {\n    onSubmitForm: PropTypes.func,\n    errors: PropTypes.object\n};\n\nfunction mapStateToProps(state){\n    return { \n        errors: state.books.manage_book.errors,\n        selectedBook: state.books.list_book.selectedBook\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      onSubmitForm: state => evt => {\n        if (evt !== undefined && evt.preventDefault) evt.preventDefault();\n        (state.isEditing) ? dispatch(bookUpdateRequest(evt,state.id)): dispatch(bookAddRequest(evt));\n      },\n      onPageInit: dispatch(bookAddPageInit()),\n      getBookDetail: (id) => dispatch(bookDetailInit(id)),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(ManageBook));"],"sourceRoot":""}