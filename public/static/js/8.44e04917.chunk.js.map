{"version":3,"sources":["components/FlashMessage/FlashMessage.jsx","modules/Login/index.jsx"],"names":["FlashMessage","props","data","this","alertClass","className","role","constructor","String","Object","keys","map","key","Array","item","index","msg","type","Component","Login","state","email","handleConfirmClick","bind","handleLoginSubmit","onClick","redirectForConfirm","browserRedirect","setState","errors","err_message","message","confirm_message","length","messageForConfirm","initialValues","password","onSubmit","onSubmitForm","validationSchema","Yup","shape","required","min","values","touched","isValid","handleChange","handleBlur","handleSubmit","htmlFor","id","value","onChange","onBlur","placeholder","disabled","to","connect","login","dispatch","evt","undefined","preventDefault","console","log","usercredits","username","loginRequest","onPageInit","loginPageInit","withRouter"],"mappings":"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","file":"static/js/8.44e04917.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass FlashMessage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { data } = this.props;\n        const { alertClass } = this.props;\n        return (\n            <div className={`alert alert-${alertClass} alert-dismissible fade show`} role=\"alert\">\n                {data.constructor === String && <li> {data}</li>}\n                {data.constructor === Object &&\n                    Object.keys(data).map(key => {\n                    return (\n                        <li key={key}>\n                        {key} {data[key]}\n                        </li>\n                    );\n                    })}\n                {data.constructor === Array &&\n                    data.map((item, index) => {\n                    return <li key={index}>{item.msg}</li>;\n                    })}\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default FlashMessage;\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport './login.css';\nimport PropTypes from 'prop-types';\nimport { loginRequest,loginPageInit }  from './actions';\nimport FlashMessage from '../../components/FlashMessage/FlashMessage';\nimport { redirectForConfirm } from '../Register/ConfirmAccount/actions';\nimport { browserRedirect } from '../../helpers/helpers';\n\n\nclass Login extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: ''\n        }\n        this.handleConfirmClick = this.handleConfirmClick.bind(this);\n        this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\n    }\n\n    messageForConfirm() {\n        return (\n            <span>\n                You can confirm your account from <button type=\"button\" className=\"confirm-button-link\" onClick={this.handleConfirmClick}>here</button>.\n            </span>\n        );\n    }\n\n    handleConfirmClick(){\n        this.props.redirectForConfirm(this.state.email);\n        browserRedirect('/confirm-account');\n    }\n\n    handleLoginSubmit(email){\n        this.setState({email})\n    }\n\n    render(){\n        let {errors} = this.props;\n        let err_message = errors.data?errors.data:errors.message;\n        let confirm_message = err_message === \"Account is not confirmed. Please confirm your account.\"?true:false;\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                    {Object.keys(errors).length > 0 &&\n                        <div>\n                            <FlashMessage data={err_message} alertClass=\"danger\" />\n                            {confirm_message &&\n                                <div>{this.messageForConfirm()}</div>\n                            }\n                        </div>\n                    }\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                        <h1>Login</h1>\n                        <Formik\n                            initialValues={{ email: '', password:'' }}\n                            onSubmit={this.props.onSubmitForm}\n                            validationSchema={Yup.object().shape({\n                                email: Yup.string()\n                                .email()\n                                .required('Required'),\n                                password: Yup.string()\n                                .required('Required').min(6),\n                            })}\n                            >\n                            {props => {\n                                const {\n                                values,\n                                touched,\n                                errors,\n                                isValid,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                } = props;\n                                return (\n                                    <form onSubmit={handleSubmit}>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                                            <input type=\"email\"\n                                                id=\"email\"\n                                                value={values.email}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.email && touched.email ? 'form-control text-input error' : 'form-control text-input'\n                                                } \n                                                placeholder=\"Enter email\" \n                                            />\n                                            {errors.email && touched.email && (\n                                                <div className=\"input-feedback\">{errors.email}</div>\n                                            )}\n                                            <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                        </div> \n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"exampleInputPassword1\">Password</label>\n                                            <input type=\"password\" \n                                                id=\"password\"\n                                                value={values.password}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.password && touched.password ? 'form-control text-input error' : 'form-control text-input'\n                                                }\n                                                placeholder=\"Password\" \n                                            />\n                                            {errors.password && touched.password && (\n                                                <div className=\"input-feedback\">{errors.password}</div>\n                                            )}\n                                        </div>\n                                        <button type=\"submit\" className=\"btn btn-primary\" onClick={() => {\n                                            this.handleLoginSubmit(values.email);\n                                        }} disabled={!isValid}>Submit</button>\n                                        <div className=\"form-group\">\n                                            Not registered yet? Register from <Link to=\"/register\">here</Link>.\n                                        </div>\n                                    </form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nLogin.propTypes = {\n    onSubmitForm: PropTypes.func,\n    errors: PropTypes.object\n};\n\nfunction mapStateToProps(state){\n    return { errors: state.login.errors};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      onSubmitForm: evt => {\n        if (evt !== undefined && evt.preventDefault) evt.preventDefault();\n        console.log(evt);\n        const usercredits = {username:evt.email,password:evt.password}\n        dispatch(loginRequest(usercredits));\n      },\n      onPageInit: dispatch(loginPageInit()),\n      redirectForConfirm: email =>  dispatch(redirectForConfirm(email))\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(Login));"],"sourceRoot":""}