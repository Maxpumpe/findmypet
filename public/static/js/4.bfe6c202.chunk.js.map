{"version":3,"sources":["components/FlashMessage/FlashMessage.jsx","components/Spinner/Spinner.jsx","modules/Register/ConfirmAccount/index.jsx"],"names":["FlashMessage","props","data","this","alertClass","className","role","constructor","String","Object","keys","map","key","Array","item","index","msg","type","Component","Spinner","ConfirmAccount","handleOTPResendBtn","bind","email","browserRedirect","resendOTP","clearConfirmDetails","requesting","errors","length","message","resend_success","initialValues","otp","onSubmit","onSubmitForm","validationSchema","Yup","shape","matches","required","values","touched","isValid","isSubmitting","handleChange","handleBlur","handleSubmit","htmlFor","id","value","onChange","onBlur","placeholder","name","disabled","onClick","connect","state","register","otp_errors","confirm_email","dispatch","evt","actions","undefined","preventDefault","verifyOTPRequest","setTimeout","setSubmitting","onPageInit","otpPageInit","clearConfirmData","resendOTPRequest","withRouter"],"mappings":"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","file":"static/js/4.bfe6c202.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass FlashMessage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { data } = this.props;\n        const { alertClass } = this.props;\n        return (\n            <div className={`alert alert-${alertClass} alert-dismissible fade show`} role=\"alert\">\n                {data.constructor === String && <li> {data}</li>}\n                {data.constructor === Object &&\n                    Object.keys(data).map(key => {\n                    return (\n                        <li key={key}>\n                        {key} {data[key]}\n                        </li>\n                    );\n                    })}\n                {data.constructor === Array &&\n                    data.map((item, index) => {\n                    return <li key={index}>{item.msg}</li>;\n                    })}\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default FlashMessage;\n","import React, { Component } from 'react';\nimport './spinner.css';\n\nclass Spinner extends Component {\n    render(){\n        return (\n            <div className=\"loader-wrapper\">\n                <div className=\"spinner\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Spinner;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport {withRouter} from 'react-router'\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport '../../Login/login.css';\nimport PropTypes from 'prop-types';\nimport { verifyOTPRequest,otpPageInit, clearConfirmData, resendOTPRequest }  from './actions';\nimport FlashMessage from '../../../components/FlashMessage/FlashMessage';\nimport { browserRedirect } from '../../../helpers/helpers';\nimport Spinner from '../../../components/Spinner/Spinner';\n\nclass ConfirmAccount extends Component {\n    constructor(props){\n        super(props);\n        this.handleOTPResendBtn = this.handleOTPResendBtn.bind(this);\n    }\n\n    componentDidMount(){\n        if(!this.props.email){\n            browserRedirect('/');\n        }\n    }\n\n    handleOTPResendBtn(){\n        this.props.resendOTP(this.props.email);\n    }\n\n    componentWillUnmount(){\n        this.props.clearConfirmDetails();\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                {this.props.requesting && <Spinner /> }\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                        <div>\n                        {Object.keys(this.props.errors).length > 0 &&\n                            <div>\n                                <FlashMessage data={this.props.errors.data?this.props.errors.data:this.props.errors.message} alertClass=\"danger\" />\n                            </div>\n                        }\n                        </div>\n                        <div>\n                        {Object.keys(this.props.resend_success).length > 0 &&\n                            <div>\n                                <FlashMessage data={this.props.resend_success.data?this.props.resend_success.data:this.props.resend_success.message} alertClass=\"success\" />\n                            </div>\n                        }\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                <h1>Confirm Account</h1>\n                        <Formik\n                            initialValues={{ otp: '',email:this.props.email }}\n                            onSubmit={this.props.onSubmitForm}\n                            validationSchema={Yup.object().shape({\n                                otp: Yup.string().matches(/^[0-9]+$/,'OTP only allows numeric.')\n                                .required('OTP Required'),\n                            })}\n                            >\n                            {props => {\n                                const {\n                                values,\n                                touched,\n                                errors,\n                                isValid,\n                                isSubmitting,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                } = props;\n                                return (\n                                    <form onSubmit={handleSubmit}>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"otp\">OTP  for Email: {this.props.email}</label>\n                                            <input type=\"text\"\n                                                id=\"otp\"\n                                                value={values.otp}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.otp && touched.otp ? 'form-control text-input error' : 'form-control text-input'\n                                                } \n                                                placeholder=\"Enter OTP\" \n                                            />\n                                            {errors.otp && touched.otp && (\n                                                <div className=\"input-feedback\">{errors.otp}</div>\n                                            )}\n                                        </div>\n                                        <Field type=\"hidden\" name=\"email\" id=\"email\" /> \n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn-primary\" disabled={!isValid || isSubmitting}>Submit</button>\n                                            <button type=\"button\" className=\"btn btn-warning resend-btn\" onClick={this.handleOTPResendBtn} disabled={isSubmitting}>Resend</button>\n                                        </div>\n                                    </form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nConfirmAccount.propTypes = {\n    onSubmitForm: PropTypes.func,\n    errors: PropTypes.object\n};\n\nfunction mapStateToProps(state){\n    return { \n        errors: state.register.otp_errors,\n        email: state.register.confirm_email,\n        resend_success: state.register.resend_success,\n        requesting: state.register.requesting\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      onSubmitForm: (evt, actions) => {\n        if (evt !== undefined && evt.preventDefault) evt.preventDefault();\n        dispatch(verifyOTPRequest(evt));\n        setTimeout(() => {\n            actions.setSubmitting(false);\n        }, 500);\n      },\n      onPageInit: dispatch(otpPageInit()),\n      clearConfirmDetails: () => dispatch(clearConfirmData()),\n      resendOTP: (email) => dispatch(resendOTPRequest(email))\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(ConfirmAccount));"],"sourceRoot":""}