{"version":3,"sources":["components/FlashMessage/FlashMessage.jsx","components/Spinner/Spinner.jsx","modules/Register/index.jsx"],"names":["FlashMessage","props","data","this","alertClass","className","role","constructor","String","Object","keys","map","key","Array","item","index","msg","type","Component","Spinner","Register","prevProps","prevState","user","length","formik","resetForm","requesting","errors","message","ref","initialValues","firstName","lastName","email","password","confirmPassword","onSubmit","onSubmitForm","validationSchema","Yup","shape","matches","required","min","oneOf","values","touched","isValid","isSubmitting","handleChange","handleBlur","handleSubmit","htmlFor","id","value","onChange","onBlur","placeholder","onClick","disabled","to","connect","state","register","dispatch","evt","actions","undefined","preventDefault","registerRequest","setTimeout","setSubmitting","onPageInit","registerPageInit","withRouter"],"mappings":"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","file":"static/js/5.1f13c322.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass FlashMessage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { data } = this.props;\n        const { alertClass } = this.props;\n        return (\n            <div className={`alert alert-${alertClass} alert-dismissible fade show`} role=\"alert\">\n                {data.constructor === String && <li> {data}</li>}\n                {data.constructor === Object &&\n                    Object.keys(data).map(key => {\n                    return (\n                        <li key={key}>\n                        {key} {data[key]}\n                        </li>\n                    );\n                    })}\n                {data.constructor === Array &&\n                    data.map((item, index) => {\n                    return <li key={index}>{item.msg}</li>;\n                    })}\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default FlashMessage;\n","import React, { Component } from 'react';\nimport './spinner.css';\n\nclass Spinner extends Component {\n    render(){\n        return (\n            <div className=\"loader-wrapper\">\n                <div className=\"spinner\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Spinner;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {withRouter} from 'react-router'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Login/login.css';\nimport PropTypes from 'prop-types';\nimport { registerRequest,registerPageInit }  from './actions';\nimport FlashMessage from '../../components/FlashMessage/FlashMessage';\nimport Spinner from '../../components/Spinner/Spinner';\n\nclass Register extends Component {\n    componentDidUpdate(prevProps, prevState) {\n        // reset form \n        if(Object.keys(this.props.user).length > 0){\n            this.formik.resetForm();\n        }   \n    }\n    render(){\n        return(\n            <div className=\"container\">\n                {this.props.requesting && <Spinner /> }\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                    {Object.keys(this.props.errors).length > 0 &&\n                        <div>\n                            <FlashMessage data={this.props.errors.data?this.props.errors.data:this.props.errors.message} alertClass=\"danger\" />\n                        </div>\n                    }\n                    {Object.keys(this.props.user).length > 0 &&\n                        <div>\n                            <FlashMessage data={this.props.user.message} alertClass=\"success\" />\n                        </div>\n                    }\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                        <h1>Registration</h1>\n                        <Formik\n                            ref={(ref) => this.formik = ref}\n                            initialValues={{ firstName: '',lastName: '', email: '', password:'', confirmPassword:'' }}\n                            onSubmit={this.props.onSubmitForm}\n                            validationSchema={Yup.object().shape({\n                                firstName: Yup.string().matches(/^[a-zA-Z]+$/,'First name only allows alphabets.')\n                                .required('First Name Required'),\n                                lastName: Yup.string()\n                                .required('Last Name Required'),\n                                email: Yup.string()\n                                .email()\n                                .required('Email Required'),\n                                password: Yup.string()\n                                .required('Password Required').min(6),\n                                confirmPassword: Yup.string()\n                                .oneOf([Yup.ref('password'), null], \"Passwords don't match\")\n                                .required('Confirm Password Required'),\n                            })}\n                            >\n                            {props => {\n                                const {\n                                values,\n                                touched,\n                                errors,\n                                isValid,\n                                isSubmitting,\n                                handleChange,\n                                handleBlur,\n                                handleSubmit,\n                                } = props;\n                                return (\n                                    <form onSubmit={handleSubmit}>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"firstName\">First Name</label>\n                                            <input type=\"text\"\n                                                id=\"firstName\"\n                                                value={values.firstName}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.firstName && touched.firstName ? 'form-control text-input error' : 'form-control text-input'\n                                                } \n                                                placeholder=\"Enter First Name\" \n                                            />\n                                            {errors.firstName && touched.firstName && (\n                                                <div className=\"input-feedback\">{errors.firstName}</div>\n                                            )}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"lastName\">Last Name</label>\n                                            <input type=\"text\"\n                                                id=\"lastName\"\n                                                value={values.lastName}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.lastName && touched.lastName ? 'form-control text-input error' : 'form-control text-input'\n                                                } \n                                                placeholder=\"Enter Last Name\" \n                                            />\n                                            {errors.lastName && touched.lastName && (\n                                                <div className=\"input-feedback\">{errors.lastName}</div>\n                                            )}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                                            <input type=\"email\"\n                                                id=\"email\"\n                                                value={values.email}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.email && touched.email ? 'form-control text-input error' : 'form-control text-input'\n                                                } \n                                                placeholder=\"Enter email\" \n                                            />\n                                            {errors.email && touched.email && (\n                                                <div className=\"input-feedback\">{errors.email}</div>\n                                            )}\n                                            <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                        </div> \n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"exampleInputPassword1\">Password</label>\n                                            <input type=\"password\" \n                                                id=\"password\"\n                                                value={values.password}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.password && touched.password ? 'form-control text-input error' : 'form-control text-input'\n                                                }\n                                                placeholder=\"Password\" \n                                            />\n                                            {errors.password && touched.password && (\n                                                <div className=\"input-feedback\">{errors.password}</div>\n                                            )}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                                            <input type=\"password\" \n                                                id=\"confirmPassword\"\n                                                value={values.confirmPassword}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                className={\n                                                    errors.confirmPassword && touched.confirmPassword ? 'form-control text-input error' : 'form-control text-input'\n                                                }\n                                                placeholder=\"confirmPassword\" \n                                            />\n                                            {errors.confirmPassword && touched.confirmPassword && (\n                                                <div className=\"input-feedback\">{errors.confirmPassword}</div>\n                                            )}\n                                        </div>\n                                        <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit} disabled={!isValid || isSubmitting}>Submit</button>\n                                        <div className=\"form-group\">\n                                            Already registered? Login from <Link to=\"/login\">here</Link>.\n                                        </div>\n                                    </form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nRegister.propTypes = {\n    onSubmitForm: PropTypes.func,\n    errors: PropTypes.object\n};\n\nfunction mapStateToProps(state){\n    return { \n        errors: state.register.errors,\n        user: state.register.user,\n        requesting: state.register.requesting\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      onSubmitForm: (evt, actions) => {\n        if (evt !== undefined && evt.preventDefault) evt.preventDefault();\n        dispatch(registerRequest(evt));\n        setTimeout(() => {\n            actions.setSubmitting(false);\n        }, 500);\n      },\n      onPageInit: dispatch(registerPageInit())\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(Register));"],"sourceRoot":""}